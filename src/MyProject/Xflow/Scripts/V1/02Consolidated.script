// Recurrent Scope Variables:
//@@__vc@@
//  __vc: https://cosmos15.osdinfra.net/cosmos/Asimov.Partner.datafun/
//  _version: @@_version@@
//  _recurrence: @@_recurrence@@
//  _trackerFolder: @@_trackerFolder@@
//  _startDate: @@_startDate@@
//  _endDate: @@_endDate@@
//  _priority: @@_priority@@
//  _maxJobs: @@_maxJobs@@
//  _customProperties: @@_customProperties@@
//  _vcPercentAllocation: @@_vcPercentAllocation@@
//  _AllData: @@AllData@@
// _dependencyStreams: @@_dependencyStreams@@
// _dependencyCheckMinutes: @@_dependencyCheckMinutes@@

// runMode: @@runMode@@                             => "prod" or "ppe" or "test". For local testing, this does not matter.


#DECLARE runMode string =
    IF("@@runMode@@".Equals("prod", StringComparison.InvariantCultureIgnoreCase), "Prod",
    IF("@@runMode@@".Equals("ppe",  StringComparison.InvariantCultureIgnoreCase), "PPE", "@@runMode@@"));

#DECLARE version string = IF("@@version@@".StartsWith("@@"), "V1", "@@version@@");
#DECLARE UtcNow DateTime = DateTime.UtcNow;
#DECLARE startDateTimeX DateTime = IF("@@startDate@@".StartsWith("@@"), @UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE currentDateTime DateTime = (@startDateTimeX).Date.AddHours(-1);
// output stream for day D-1.
#DECLARE outputDateTime DateTime = (@startDateTimeX).Date.AddDays(-1);
#DECLARE streamsRoot string = string.Format("/shares/asimov.prod.data/UserSensitive.Usage.Partner/Processed/DSProjectSample/{0}/{1}/", @version, @runMode);

#DECLARE appInteractivityPath string = @streamsRoot + string.Format("/AppInteractivity/{0:yyyy/MM/dd}/AppInteractivity_{0:yyyy-MM-dd}.ss", @outputDateTime);

MODULE "/shares/asimov.prod.data/Public/Resources/Latest/Asimov/Api/v3/Asimov.Batch.module" AS Asimov;
MODULE "/shares/PXSCosmos15.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module"; 
USING Privacy; 

AppInteractivity = SSTREAM @appInteractivityPath;

verbose =  
    SELECT DeviceId, ClientIpAddress, ClientTime
    FROM AppInteractivity;

verboseAnchorGrouped =
    SELECT DeviceId,
           ClientIpAddress,
           CommonFunctions.GetIpAnchor(ClientIpAddress) AS IPAnchor,
           CommonFunctions.GetIp4(ClientIpAddress) AS Ip4,
           COUNT(*) AS Cnt,
           MAX(ClientTime) AS ClientTime
    FROM verbose
    GROUP BY DeviceId,
             ClientIpAddress,
             IPAnchor,
             Ip4;

verboseAnchor =
    SELECT DeviceId,
           ClientIpAddress,
           IPAnchor,
           Ip4,
           Cnt,
           ClientTime,
           ROW_NUMBER() OVER(PARTITION BY DeviceId ORDER BY ClientTime DESC) AS RN
    FROM verboseAnchorGrouped
    HAVING RN <= 10;

#DECLARE verboseAnchorPath string = @streamsRoot + string.Format("{0:yyyy/MM/dd}/verboseAnchor_{0:yyyy-MM-dd}.ss", @startDateTimeX);

[Privacy.DataType.DeviceConnectivityAndConfiguration]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT verboseAnchor 
TO SSTREAM @verboseAnchorPath
CLUSTERED BY DeviceId
SORTED BY DeviceId
WITH STREAMEXPIRY "7";

#CS
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;

public static class CommonFunctions
{
    public static long GetIpAnchor(string ipAddress)
    {
        if (string.IsNullOrEmpty(ipAddress))
            return -1L;
        string[] strArray = ipAddress.Split('.');
        if (strArray.Length != 4)
            return -2L;
        long num = 0L;
        for (int index = 0; index < strArray.Length - 1; ++index)
        {
            short result;
            if (!short.TryParse(strArray[index], out result))
                return -3L;
            num = num * 256L + (long)result;
        }
        return num;
    }

    public static short GetIp4(string ipAddress)
    {
        if (string.IsNullOrEmpty(ipAddress))
            return (short)-1;
        string[] strArray = ipAddress.Split('.');
        if (strArray.Length != 4)
            return (short)-2;
        short result;
        if (!short.TryParse(strArray[3], out result))
            return (short)-3;
        else
            return result;
    }

    public static double ToDouble(string score)
    {
        double result;
        if (!double.TryParse(score, out result))
        {
            return (double) 0.0;
        }
        else
        {
            return result;
        }
    }
}



#ENDCS